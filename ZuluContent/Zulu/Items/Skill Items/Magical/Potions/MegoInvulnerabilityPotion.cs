using System;
using Server.Spells;
using Server.Spells.Fourth;
using ZuluContent.Zulu.Engines.Magic.Enchantments.Buffs;

namespace Server.Items
{
    public class LesserMegoInvulnerabilityPotion : BaseMegoInvulnerabilityPotion
    {
        public override int Hue { get; set; } = 654;
        public override string DefaultName { get; } = "Lesser Mego Invulnerability potion";
        public override uint PotionStrength { get; set; } = 4;
        public LesserMegoInvulnerabilityPotion() : base(PotionEffect.LesserMegoInvulnerability) { }
        public LesserMegoInvulnerabilityPotion(Serial serial) : base(serial) { }
        
        public override void Serialize(IGenericWriter writer)
        {
            base.Serialize(writer);
            writer.Write((int) 0); // version
        }

        public override void Deserialize(IGenericReader reader)
        {
            base.Deserialize(reader);
            int version = reader.ReadInt();
        }
    }
    
    public class MegoInvulnerabilityPotion : BaseMegoInvulnerabilityPotion
    {
        public override int Hue { get; set; } = 154;
        public override string DefaultName { get; } = "Mego Invulnerability potion";
        public override uint PotionStrength { get; set; } = 8;
        public MegoInvulnerabilityPotion() : base(PotionEffect.MegoInvulnerability) { }
        public MegoInvulnerabilityPotion(Serial serial) : base(serial) { }
        
        public override void Serialize(IGenericWriter writer)
        {
            base.Serialize(writer);
            writer.Write((int) 0); // version
        }

        public override void Deserialize(IGenericReader reader)
        {
            base.Deserialize(reader);
            int version = reader.ReadInt();
        }
    }
    
    public class GreaterMegoInvulnerabilityPotion : BaseMegoInvulnerabilityPotion
    {
        public override string DefaultName { get; } = "Greater Mego Invulnerability potion";
        public override uint PotionStrength { get; set; } = 12;
        public GreaterMegoInvulnerabilityPotion() : base(PotionEffect.GreaterMegoInvulnerability) { }
        public GreaterMegoInvulnerabilityPotion(Serial serial) : base(serial) { }
        
        public override void Serialize(IGenericWriter writer)
        {
            base.Serialize(writer);
            writer.Write((int) 0); // version
        }

        public override void Deserialize(IGenericReader reader)
        {
            base.Deserialize(reader);
            int version = reader.ReadInt();
        }
    }
    public abstract class BaseMegoInvulnerabilityPotion : BasePotion
    {

        public BaseMegoInvulnerabilityPotion(PotionEffect effect) : base(0xE2A, effect)
        {
        }

        public BaseMegoInvulnerabilityPotion(Serial serial) : base(serial)
        {
        }

        public override void Serialize(IGenericWriter writer)
        {
            base.Serialize(writer);
            writer.Write((int) 0); // version
        }

        public override void Deserialize(IGenericReader reader)
        {
            base.Deserialize(reader);
            int version = reader.ReadInt();
        }

        public bool Buff(Mobile from)
        {
            if (from.CanBuff(from, icons: BuffIcon.Protection))
            {
                from.TryAddBuff(new ArmorBuff
                {
                    Title = DefaultName,
                    Details = new []{ $"Potion Strength: {PotionStrength}"},
                    ArmorMod = Utility.Dice(PotionStrength, 2, 0),
                    Duration = TimeSpan.FromSeconds(PotionStrength * 15),
                });
                return true;
            }

            return false;
        }

        public override void Drink(Mobile from)
        {
            if (Buff(from))
            {
                from.FixedEffect(0x3739, 10, 15);
                from.PlaySound(0x1EB);
                PlayDrinkEffect(from);
                Consume();
            }
        }
    }
}